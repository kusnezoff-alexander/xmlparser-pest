// # Character class (inspired by [Github](https://github.com/jturner314/py_literal/blob/master/src/grammar.pest)
// =no *control characters* or chars outside Unicode range
Char = _{ "\x09" | "\x0A" | "\x0D" | '\x20'..'\u{D7FF}' | '\u{E000}'..'\u{FFFD}' | '\u{10000}'..'\u{10FFFF}' }

// # General
S = { ("\x20" | "\x09" | "\x0D" | "\x0A")+ } // see [S](https://www.w3.org/TR/REC-xml/#NT-S)
Quote = { "'" | "\"" }
Misc = { Comment | PI | S }

// Name
Name = { NameStartChar ~ NameChar*}
NameStartChar = _{
	":" | ASCII_ALPHA_UPPER | "_" | ASCII_ALPHA_LOWER | '\xC0'..'\xD6' | '\xD8'..'\xF6' |
	'\xF8'..'\u{2FF}' | '\u{370}'..'\u{37D}' | '\u{37F}'..'\u{1FFF}' | '\u{200C}'..'\u{200D}' |
	'\u{2070}'..'\u{218F}' | '\u{2C00}'..'\u{2FEF}' | '\u{3001}'..'\u{D7FF}' | '\u{F900}'..'\u{FDCF}' |
	'\u{FDF0}'..'\u{FFFD}' | '\u{10000}'..'\u{EFFFF}'
} // [4](https://www.w3.org/TR/REC-xml/#NT-NameStartChar)
NameChar = _{ NameStartChar | "-" | "." | ASCII_DIGIT | "\xB7" | '\u{0300}'..'\u{036F}' | '\u{203F}'..'\u{2040}' }

// Reference
Reference = { EntityRef | CharRef } // [67](https://www.w3.org/TR/REC-xml/#NT-Reference)
EntityRef = { "&" ~ Name ~ ";" } // [68](https://www.w3.org/TR/REC-xml/#NT-EntityRef)
CharRef = { "&#" ~ ASCII_DIGIT+ ~ ";" | "&#x" ~ ASCII_HEX_DIGIT+ ~ ";" } // [66](https://www.w3.org/TR/REC-xml/#NT-CharRef)

// Comment [15](https://www.w3.org/TR/REC-xml/#NT-Comment)
Comment = { "<!--" ~ (!"-" ~ Char | "-" ~ !"-" ~ Char)* ~ "-->" } // =last char can't be '-'

// # Prolog [22]
// ## XMLDecl [23]
XMLDecl = { "<?xml" ~ VersionInfo ~ EncodingDecl? ~ StandaloneDecl? ~ S? ~ "?>" } // [23](https://www.w3.org/TR/REC-xml/#NT-XMLDecl)
VersionInfo = { S ~ "version" ~ Eq ~ PUSH(Quote) ~ VersionNum ~ POP }
Eq = { S? ~ "=" ~ S? } // [25]
VersionNum = { "1." ~ ASCII_DIGIT+ } // [VerionNum](https://www.w3.org/TR/REC-xml/#NT-VersionNum): Warning if !=1.0?

EncodingDecl = { S ~ "encoding" ~ Eq ~ PUSH(Quote) ~ EncName ~ POP} // [80](https://www.w3.org/TR/REC-xml/#NT-EncodingDecl)
EncName = { ASCII_ALPHA  ~ ( ASCII_ALPHANUMERIC | "." | "_" | "-" )* } // [81] = only *Latin Letters*

// `standalone="yes"` == ignore any markup declarations in the DTD
// see [StackOverflow](https://stackoverflow.com/a/14690849/20675205)
StandaloneDecl = { S ~ "standalone" ~ Eq ~ PUSH(Quote) ~ ("yes"|"no") ~ POP } // [32](https://www.w3.org/TR/REC-xml/#NT-SDDecl)

// ## Document Type Declaration [28]
// Doctypedecl = { "<!DOCTYPE" ~ S ~ Name } // TODO

// ### External Entities
ExternalID = { ("SYSTEM" ~ S ~ SystemLiteral) | ("Public" ~ S ~ PubidLiteral ~ S ~ SystemLiteral) }
SystemLiteral = { PUSH(Quote) ~ (!PEEK ~ ANY)* ~ POP } // =anything within quotes (but no quotes within quotes!), see [11](https://www.w3.org/TR/REC-xml/#NT-SystemLiteral)
PubidLiteral = { ("\"" ~ PubidChar* ~ "\"") | "'" ~ (!"'" ~ PubidChar)* ~ "'" }
PubidChar = _{
	"\x20" | "\x0D" | "\0xA" | ASCII_ALPHANUMERIC | "-" | "'" | "(" | ")" | "+" | "," |
	"." | "/" | ":" | "=" | "?" | ";" | "!" | "*" | "#" | "@" | "$" | "_" | "%"
} // [13](https://www.w3.org/TR/REC-xml/#NT-PubidChar)

// # CDATA Sections
CDStart = { "<![CDATA[" }
CDEnd = { "]]>" }
CData = { (!("]]>") ~ Char )* }
CDSect = { CDStart ~ CData ~ CDEnd }

// # Attribute [41](https://www.w3.org/TR/REC-xml/#NT-Attribute)
Attribute = { Name ~ Eq ~ AttValue }
AttValueDisallowed = _{ "<" | "&" | "\"" }
AttValue = { "\"" ~ (!AttValueDisallowed ~ Char | Reference )* ~ "\""} // [10](https://www.w3.org/TR/REC-xml/#NT-AttValue)

// # Element [39](https://www.w3.org/TR/REC-xml/#NT-element)
// Element = { EmptyElemTag | STag ~ content ~ Etag } // TODO
// Constraints
// - *Well-formedness constraint*: [Element Type Match](https://www.w3.org/TR/REC-xml/#GIMatch)
EmptyElemTag = { "<" ~ Name ~ (S ~ Attribute)* ~ S? ~ "/>" } // eg `<br/>`, see [44](https://www.w3.org/TR/REC-xml/#NT-EmptyElemTag)
STag = { "<" ~ PUSH(Name) ~ (S ~ Attribute)* ~ S? ~ ">" } // [40](https://www.w3.org/TR/REC-xml/#NT-STag)
ETag = { "</" ~ POP ~ S? ~ ">" } // [42](https://www.w3.org/TR/REC-xml/#NT-ETag)

// # Processing Instructions
// -> see [16](https://www.w3.org/TR/REC-xml/#sec-pi)
// - `PITarget`=identifies app to which the instr is directed
PI = { "<?" ~ PITarget ~ (S ~ (!"?>" ~ Char)*)? ~ "?>" }
PITarget = { (!^"xml" ~ Name) | ("xml" ~ NameChar+) } // target="xml"|"xMl"|"XML"|... are reserved! BUT may contain "xml" (eg "xml-stylesheet")
